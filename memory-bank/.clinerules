# OpenHands プロジェクトルール

このファイルは、OpenHandsプロジェクトに関する重要なパターン、設計上の決定、および作業方法を文書化しています。これは、プロジェクトの理解と効率的な作業に役立ちます。

## コーディングパターン

1. **Pythonコーディングスタイル**:
   - PEP 8に従う
   - 型ヒントを使用する
   - Docstringはすべての関数とクラスに含める

2. **TypeScriptコーディングスタイル**:
   - ESLintとPrettierの設定に従う
   - 型を明示的に定義する
   - コンポーネントはReact関数コンポーネントとして実装する

3. **イベント駆動設計**:
   - コンポーネント間の通信はEventStreamを通じて行う
   - 直接的な関数呼び出しよりもイベントを優先する
   - イベントハンドラーは副作用を最小限に抑える

4. **状態管理**:
   - 状態の変更は明示的に行う
   - 状態の更新は不変性を保持する
   - グローバル状態は最小限に抑える

## プロジェクト構造

1. **ディレクトリ構造**:
   - `openhands/`: コアコンポーネント
   - `frontend/`: フロントエンドコード
   - `containers/`: Dockerコンテナ関連
   - `docs/`: ドキュメンテーション
   - `evaluation/`: 評価ベンチマーク
   - `tests/`: テストコード

2. **モジュール分割**:
   - 各モジュールは単一の責任を持つ
   - 循環依存を避ける
   - 適切な抽象化レベルを維持する

3. **テスト構造**:
   - 単体テストは対応するモジュールと同じ構造を持つ
   - 統合テストは別のディレクトリに配置する
   - テストデータは専用のディレクトリに保存する

## 開発ワークフロー

1. **バージョン管理**:
   - Gitを使用する
   - 機能ブランチを使用する
   - プルリクエストを通じて変更を統合する

2. **依存関係管理**:
   - Pythonの依存関係はPoetryで管理する
   - Node.jsの依存関係はnpmで管理する
   - 依存関係の更新は慎重に行い、テストを実行する

3. **ビルドプロセス**:
   - `make build`コマンドを使用してプロジェクトをビルドする
   - `make run`コマンドを使用してアプリケーションを実行する
   - `make setup-config`コマンドを使用して言語モデルを設定する

4. **テスト実行**:
   - `poetry run pytest ./tests/unit/test_*.py`コマンドを使用して単体テストを実行する
   - 統合テストは専用のスクリプトを使用する
   - CIパイプラインでテストを自動化する

## デバッグとトラブルシューティング

1. **ログ記録**:
   - 適切なログレベルを使用する
   - 重要なイベントとエラーを記録する
   - 個人情報や機密情報をログに記録しない

2. **LLMデバッグ**:
   - 環境変数`DEBUG=1`を設定してLLMのプロンプトとレスポンスを記録する
   - ログは`logs/llm/CURRENT_DATE`ディレクトリに保存される
   - プロンプトの問題を特定するためにログを分析する

3. **一般的な問題**:
   - Dockerの問題: Dockerデーモンが実行されていることを確認する
   - 言語モデルの問題: APIキーと設定を確認する
   - パフォーマンスの問題: リソース使用量を監視する

## コミュニケーションとコラボレーション

1. **コミュニティチャネル**:
   - Slack: 研究、アーキテクチャ、将来の開発について議論する
   - Discord: 一般的な議論、質問、フィードバック
   - GitHub Issues: バグ報告と機能リクエスト

2. **貢献プロセス**:
   - [CONTRIBUTING.md](https://github.com/All-Hands-AI/OpenHands/blob/main/CONTRIBUTING.md)のガイドラインに従う
   - 変更を提案する前に既存のイシューを確認する
   - 明確な説明と必要に応じてテストを提供する

3. **コードレビュー**:
   - すべての変更はレビューを受ける
   - コードの品質、テスト、ドキュメンテーションを確認する
   - 建設的なフィードバックを提供する

## 学習したパターン

1. **効果的なプロンプト設計**:
   - 明確で具体的な指示を提供する
   - コンテキストと例を含める
   - 複雑なタスクを小さなステップに分割する

2. **エージェントの制約**:
   - 言語モデルの制限を理解する
   - 複雑なタスクを管理可能な部分に分割する
   - エラー処理と回復メカニズムを実装する

3. **パフォーマンス最適化**:
   - 不必要なLLM呼び出しを避ける
   - キャッシュを適切に使用する
   - リソース使用量を監視する

これらのルールとパターンは、OpenHandsプロジェクトでの作業を効率的かつ効果的にするために役立ちます。プロジェクトの進化に伴い、このファイルは更新されます。
